// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderData;

namespace OrderData.Migrations
{
    [DbContext(typeof(OrderDb))]
    partial class OrderDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("OrderData.BasketItem", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            ProductId = 1,
                            Quantity = 5
                        },
                        new
                        {
                            CustomerId = 1,
                            ProductId = 2,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("OrderData.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AddressOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CanPurchase")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Active = true,
                            AddressOne = "85 Clifton Road",
                            AreaCode = "DL1 5RT",
                            CanPurchase = true,
                            EmailAddress = "t7145969@live.tees.ac.uk",
                            FamilyName = "Burrell",
                            GivenName = "Chris",
                            State = "Durham",
                            TelephoneNumber = "09876543210",
                            Town = "Downtown"
                        },
                        new
                        {
                            CustomerId = 2,
                            Active = true,
                            AddressOne = "20 Fake Road",
                            AreaCode = "DLF AKE",
                            CanPurchase = true,
                            EmailAddress = "fake@live.tees.ac.uk",
                            FamilyName = "McFakeFace",
                            GivenName = "Fakie",
                            State = "FakeState",
                            TelephoneNumber = "01010101010",
                            Town = "FakeTown"
                        });
                });

            modelBuilder.Entity("OrderData.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderData.OrderedItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderedItems");
                });

            modelBuilder.Entity("OrderData.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "Fake Product 1",
                            Price = 1.0
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "Fake Product 2",
                            Price = 2.0
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "Fake Product 3",
                            Price = 3.0
                        });
                });

            modelBuilder.Entity("OrderData.BasketItem", b =>
                {
                    b.HasOne("OrderData.Customer", "Customer")
                        .WithMany("BasketItems")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderData.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrderData.Order", b =>
                {
                    b.HasOne("OrderData.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OrderData.OrderedItem", b =>
                {
                    b.HasOne("OrderData.Order", "Order")
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderData.Product", "Product")
                        .WithMany("OrderedItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrderData.Customer", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OrderData.Order", b =>
                {
                    b.Navigation("OrderedItems");
                });

            modelBuilder.Entity("OrderData.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("OrderedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
